{"version":3,"sources":["ListEditor.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ListEditor","props","textInput","focus","editor","current","state","counter","text","React","createRef","handleChange","bind","handleKeyDown","console","log","this","e","key","setState","preventDefault","stopPropagation","target","value","ref","onKeyDown","onChange","Component","App","useState","Date","startDate","setStartDate","className","type","id","selected","date","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAUaA,EAAb,kDAEI,WAAYC,GAAa,IAAD,8BACpB,cAAMA,IAFFC,eACgB,IAWxBC,MAAQ,WACH,IAAIC,EAAS,EAAKF,UAAUG,QACxBD,GACAA,EAAOD,SAZZ,EAAKG,MAAQ,CACTC,QAAS,EACTC,KAAO,OAEX,EAAKN,UAAYO,IAAMC,YACvB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBARD,EAF5B,qDAoBI,WACIE,QAAQC,IAAI,qBACZC,KAAKb,UAtBb,2BAyBI,SAAcc,GACG,UAATA,EAAEC,MAGFF,KAAKG,SAAS,CACNZ,QAAUS,KAAKV,MAAMC,QAAU,IAGvCS,KAAKG,SAAS,CACVX,KAAMQ,KAAKV,MAAME,KAAO,KAAOQ,KAAKV,MAAMC,QAAU,OAExDU,EAAEG,iBACFH,EAAEI,qBArCd,0BAyCI,SAAaJ,GACTH,QAAQC,IAAIE,EAAEK,OAAOC,OACrBP,KAAKG,SAAS,CAACX,KAAMS,EAAEK,OAAOC,UA3CtC,oBA8CI,WACI,IAAMf,EAAOQ,KAAKV,MAAME,KAKxB,OACI,0BACIgB,IAAKR,KAAKd,UACVqB,MAAOf,EACPiB,UAAWT,KAAKH,cAChBa,SAAUV,KAAKL,mBAzD/B,GAAgCgB,a,uBCHjB,SAASC,IACpB,MAAkCC,mBAAS,IAAIC,MAA/C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEF,OACI,sBAAKC,UAAU,YAAf,UACI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,uBAAf,SACI,sBAAKA,UAAU,gDAAf,UACI,qBAAKA,UAAU,eAAf,6BACA,wBAAQA,UAAU,iBAAiBC,KAAK,SAAS,cAAY,WAAW,cAAY,aAC5E,gBAAc,YAAY,gBAAc,QAAQ,aAAW,oBADnE,SAEI,sBAAMD,UAAU,0BAEpB,qBAAKA,UAAU,+CAA+CE,GAAG,YAAjE,SACI,oBAAIF,UAAU,aAAd,SACI,oBAAIA,UAAU,WAAd,SACI,qBAAKA,UAAU,WAAf,gCAOxB,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,kCAAf,SACI,cAAC,IAAD,CAAYG,SAAUL,EAAWL,SAAU,SAACW,GAAD,OAAUL,EAAaK,UAI1E,qBAAKJ,UAAU,MAAf,SACI,qBAAKA,UAAU,uBAAf,SACQ,cAAC,EAAD,WCpCtB,IAYeK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.64b00ca1.chunk.js","sourcesContent":["import React, {Component, KeyboardEvent } from 'react';\r\nimport './ListEditor.css';\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n    counter: number;\r\n    text: string;\r\n}\r\n\r\nexport class ListEditor extends Component<Props, State> {\r\n    private textInput: React.RefObject<HTMLTextAreaElement>;\r\n    constructor(props :any) {\r\n        super(props);\r\n        this.state = {\r\n            counter: 2,\r\n            text : \"1. \"\r\n        }\r\n        this.textInput = React.createRef();\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    }\r\n\r\n    focus = () => {\r\n         let editor = this.textInput.current;\r\n         if (editor) {\r\n             editor.focus();\r\n         }\r\n    };\r\n\r\n    componentDidMount() {\r\n        console.log(\"component mounted\");\r\n        this.focus();\r\n    }\r\n\r\n    handleKeyDown(e: KeyboardEvent) {\r\n        if (e.key ===\"Enter\") {\r\n\r\n            //this.refs.textInput.value = `${this.refs.textInput.value}\\n${this.state.counter++}. `;\r\n            this.setState({\r\n                    counter : this.state.counter + 1\r\n                }\r\n            )\r\n            this.setState({\r\n                text: this.state.text + \"\\n\" + this.state.counter + \". \"\r\n            })\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }\r\n    }\r\n\r\n    handleChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\r\n        console.log(e.target.value);\r\n        this.setState({text: e.target.value});\r\n    }\r\n\r\n    render() {\r\n        const text = this.state.text;\r\n        const style = {\r\n            height: 300,\r\n            width: 400\r\n        };\r\n        return(\r\n            <textarea\r\n                ref={this.textInput}\r\n                value={text}\r\n                onKeyDown={this.handleKeyDown}\r\n                onChange={this.handleChange}\r\n            />\r\n        )\r\n    }\r\n\r\n}\r\n\r\n","import React, {useState} from \"react\";\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {ListEditor} from \"./ListEditor\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport default function App() {\r\n    const [startDate, setStartDate] = useState(new Date());\r\n\r\n  return (\r\n      <div className=\"container\">\r\n          <div className=\"row\">\r\n              <div className=\"col-md-6 offset-md-3\">\r\n                  <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                      <div className=\"navbar-brand\" >Daily Gratitude</div>\r\n                      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\"\r\n                              aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                          <span className=\"navbar-toggler-icon\"></span>\r\n                      </button>\r\n                      <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarNav\">\r\n                          <ul className=\"navbar-nav\">\r\n                              <li className=\"nav-item\">\r\n                                  <div className=\"nav-link\">Login</div>\r\n                              </li>\r\n                          </ul>\r\n                      </div>\r\n                  </nav>\r\n              </div>\r\n          </div>\r\n          <div className=\"row\">\r\n              <div className=\"col-md-6 offset-md-3 text-right\">\r\n                  <DatePicker selected={startDate} onChange={(date) => setStartDate(date)} />\r\n              </div>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n              <div className=\"col-md-6 offset-md-3\">\r\n                      <ListEditor/>\r\n              </div>\r\n          </div>\r\n      </div>\r\n  );\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}