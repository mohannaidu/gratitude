{"version":3,"sources":["ListEditor.tsx","config/config.ts","config/firebase.ts","db/repository.ts","App.tsx","auth/index.ts","reportWebVitals.ts","index.tsx"],"names":["ListEditor","props","textInput","focus","editor","current","val","value","entry","entryCounter","getCounter","state","counter","text","React","createRef","handleChange","bind","handleKeyDown","this","nextProps","str","ks","split","lastLine","length","console","log","e","key","setState","preventDefault","stopPropagation","target","ref","onKeyDown","onChange","spellCheck","Component","config","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Providers","initializeApp","google","auth","GoogleAuthProvider","db","database","Repository","Promise","resolve","reject","once","snapshot","row","forEach","childSnapshot","data","get","gratitude","push","child","update","remove","App","useState","Date","startDate","setStartDate","error","setError","isAuthenticated","name","user","setUser","repo","entries","setEntries","useEffect","onAuthStateChanged","displayName","currentUser","fetchData","button","a","getAllGratitudeByUserAndDate","result","signInWithSocialMedia","provider","signInWithPopup","then","catch","SignInWithSocialMedia","message","LoginButton","onClick","LogoutButton","className","type","id","selected","date","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d81f24f7.chunk.js","sourcesContent":["import React, {Component, KeyboardEvent } from 'react';\r\nimport './ListEditor.css';\r\n\r\ninterface Props {\r\n    entry: string;\r\n}\r\n\r\ninterface State {\r\n    counter: number;\r\n    text: string;\r\n}\r\n\r\nexport class ListEditor extends Component<Props, State> {\r\n    private textInput: React.RefObject<HTMLTextAreaElement>;\r\n    constructor(props :any) {\r\n        super(props);\r\n        if (this.props.entry) {\r\n            // check for number of lines in entry\r\n            const entryCounter: number = this.getCounter(this.props.entry) + 1;\r\n            this.state = {\r\n                counter: entryCounter,\r\n                text: this.props.entry\r\n            }\r\n        }else\r\n            this.state = {\r\n                counter: 2,\r\n                text : \"1. \"\r\n            }\r\n        this.textInput = React.createRef();\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    }\r\n\r\n    focus = () => {\r\n         let editor = this.textInput.current;\r\n         if (editor) {\r\n             let val = editor.value;\r\n             editor.focus();\r\n             editor.value = \"\";\r\n             editor.value= val;\r\n         }\r\n    };\r\n\r\n    componentDidMount() {\r\n        //console.log(\"component mounted\");\r\n        this.focus();\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.entry) {\r\n            const entryCounter: number = this.getCounter(nextProps.entry) + 1;\r\n            this.state = {\r\n                counter: entryCounter,\r\n                text: nextProps.entry\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    getCounter(str: String){\r\n        var ks = str.split(/\\r?\\n/);\r\n        var lastLine = ks[ks.length-1].split(\".\");\r\n        console.log(lastLine[0]);\r\n        return +lastLine[0];\r\n    }\r\n\r\n    handleKeyDown(e: KeyboardEvent) {\r\n        if (e.key ===\"Enter\") {\r\n\r\n            //this.refs.textInput.value = `${this.refs.textInput.value}\\n${this.state.counter++}. `;\r\n            this.setState({\r\n                    counter : this.state.counter + 1\r\n                }\r\n            )\r\n            this.setState({\r\n                text: this.state.text + \"\\n\" + this.state.counter + \". \"\r\n            })\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }\r\n    }\r\n\r\n    handleChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\r\n        console.log(e.target.value);\r\n        this.setState({text: e.target.value});\r\n    }\r\n\r\n    render() {\r\n        const text = this.state.text;\r\n\r\n        return(\r\n            <textarea\r\n                ref={this.textInput}\r\n                value={text}\r\n                onKeyDown={this.handleKeyDown}\r\n                onChange={this.handleChange}\r\n                spellCheck=\"false\"\r\n\r\n            />\r\n        )\r\n    }\r\n\r\n}\r\n\r\n","// Contains Global Configurations\r\nconst config = {\r\n    firebase: {\r\n        apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n        authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\r\n        databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\r\n        projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n        storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n        messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\r\n        appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n        measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\r\n    }\r\n}\r\n\r\nexport default config;","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\nimport config from './config';\r\n\r\nconst FirebaseStore = firebase.initializeApp(config.firebase);\r\n\r\nexport const Providers = {\r\n    google: new firebase.auth.GoogleAuthProvider(),\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const db = firebase.database();\r\n","import {db} from \"../config/firebase\";\r\n\r\nexport class Repository {\r\n    getAllGratitudeByUserAndDate(): Promise<string> {\r\n        return new Promise((resolve, reject) =>\r\n        {\r\n            let entry: string = '';\r\n            db.ref(\"/users\").once('value', function (snapshot) {\r\n                let row: number = 1;\r\n                snapshot.forEach(function (childSnapshot) {\r\n                    //var key = childSnapshot.key;\r\n                    var data = childSnapshot.val();\r\n                    if (row === 1) {\r\n                        entry = data.text;\r\n                        //console.log(entry);\r\n                        resolve(entry);\r\n                    }\r\n                    row++;\r\n                });\r\n            });\r\n        })\r\n    }\r\n\r\n    getAll() {\r\n        return db.ref(\"/dailygratitude\").get();\r\n    }\r\n\r\n    create(gratitude) {\r\n        return db.ref(\"/dailygratitude\").push(gratitude);\r\n    }\r\n\r\n    update(key, value) {\r\n        return db.ref(\"/dailygratitude\").child(key).update(value);\r\n    }\r\n\r\n    delete(key) {\r\n        return db.ref(\"/dailygratitude\").child(key).remove();\r\n    }\r\n\r\n    deleteAll() {\r\n        return db.ref(\"/dailygratitude\").remove();\r\n    }\r\n\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {ListEditor} from \"./ListEditor\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport {auth, Providers} from './config/firebase';\r\nimport { SignInWithSocialMedia } from './auth';\r\nimport firebase from \"firebase/app\";\r\nimport {Repository} from './db/repository';\r\n\r\ninterface UserState {\r\n    isAuthenticated: boolean;\r\n    name: string;\r\n}\r\n\r\n// interface GratitudeState {\r\n//     entry: string;\r\n// }\r\n\r\nexport default function App(){\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [error, setError] = useState<string>('');\r\n    const [user, setUser] = useState<UserState>({isAuthenticated:false, name:\"\"});\r\n    let repo: Repository = new Repository();\r\n    const [entries, setEntries] = useState<string>('');\r\n   // const [entry, setEntry] = useState<GratitudeState>({entry:\"lorem ipsum\"});\r\n\r\n    // Monitor and Update user state.\r\n    useEffect(() => {\r\n\r\n        auth.onAuthStateChanged(user => {\r\n            if (user) {\r\n                let displayName:string = auth.currentUser?.displayName!;\r\n                setUser({isAuthenticated:true,name:displayName})\r\n            } else {\r\n                console.log('No user detected');\r\n                setUser({isAuthenticated:false,name:\"\"})\r\n            }\r\n        })\r\n        fetchData();\r\n    }, []);\r\n\r\n    const fetchData = async () => {\r\n        const result = await repo.getAllGratitudeByUserAndDate();\r\n        setEntries(result);\r\n    }\r\n\r\n    const signInWithSocialMedia = (provider: firebase.auth.AuthProvider) => {\r\n        if (error !== '') setError('');\r\n\r\n        SignInWithSocialMedia(provider)\r\n            .then(result => {\r\n                setUser({isAuthenticated:true,name:result.user?.displayName!})\r\n            })\r\n            .catch(error => {\r\n                setError(error.message);\r\n            });\r\n    }\r\n\r\n    const isLoggedIn = user.isAuthenticated;\r\n    let button;\r\n    if (isLoggedIn) {\r\n        button = <LogoutButton onClick={handleLogoutClick} />;\r\n    } else {\r\n        button = <LoginButton onClick={handleLoginClick} />;\r\n    }\r\n\r\n    function LoginButton(props) {\r\n        return (\r\n            <button onClick={props.onClick}>\r\n                Login\r\n            </button>\r\n        );\r\n    }\r\n\r\n    function LogoutButton(props) {\r\n        return (\r\n            <button onClick={props.onClick}>\r\n                Logout\r\n            </button>\r\n        );\r\n    }\r\n\r\n    function handleLoginClick() {\r\n        signInWithSocialMedia(Providers.google);\r\n        setUser({isAuthenticated: true, name:\"\"});\r\n    }\r\n\r\n    function handleLogoutClick() {\r\n        setUser({isAuthenticated: false, name:\"\"});\r\n    }\r\n\r\n  return (\r\n      <div className=\"container\">\r\n          <div className=\"row\">\r\n              <div className=\"col-md-6 offset-md-3\">\r\n                  <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                      <div className=\"navbar-brand\" >Daily Gratitude</div>\r\n                      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\"\r\n                              aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                          <span className=\"navbar-toggler-icon\"></span>\r\n                      </button>\r\n                      <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarNav\">\r\n                          <ul className=\"navbar-nav\">\r\n                              <li className=\"nav-item\">\r\n                                  {button}\r\n                              </li>\r\n                          </ul>\r\n                      </div>\r\n                  </nav>\r\n              </div>\r\n          </div>\r\n          <div className=\"row\">\r\n              <div className=\"col-md-3 offset-md-3 text-left\">\r\n                  Welcome {user.name}\r\n              </div>\r\n              <div className=\"col-md-1  text-right\">\r\n                  <DatePicker selected={startDate} onChange={(date) => setStartDate(date)} />\r\n              </div>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n              <div className=\"col-md-6 offset-md-3\">\r\n                  <ListEditor entry={entries}/>\r\n              </div>\r\n          </div>\r\n      </div>\r\n  );\r\n}\r\n","import firebase from 'firebase';\r\nimport { auth } from '../config/firebase';\r\n\r\nexport const SignInWithSocialMedia = (provider: firebase.auth.AuthProvider) =>\r\n    new Promise<firebase.auth.UserCredential>((resolve, reject) => {\r\n        auth.signInWithPopup(provider)\r\n            .then(result => resolve(result))\r\n            .catch(error => reject(error));\r\n    });","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}